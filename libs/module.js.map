{"version":3,"sources":["../src/module.js"],"names":["extractListenings","registerHealthCheck","parseOption","transportConfig","Array","isArray","listenings","pinSet","map","m","pins","reject","flatten","isEmpty","seneca","disableHealthCheck","forEach","p","cmd","addHealthCheck","role","healthCheck","uniq","serviceName","serviceObject","console","log","add","args","done","ok","result","timestamp","Date","service","options","timeout","parseInt"],"mappings":";;;;;QAEgBA,iB,GAAAA,iB;QAQAC,mB,GAAAA,mB;QAgCAC,W,GAAAA,W;;AA1ChB;;;;;;AAEO,SAASF,iBAAT,GAAiD;AAAA,MAAtBG,eAAsB,uEAAJ,EAAI;;AACvD,MAAIC,MAAMC,OAAN,CAAcF,gBAAgBG,UAA9B,CAAJ,EAA+C;AAC5C,QAAMC,SAASJ,gBAAgBG,UAAhB,CAA2BE,GAA3B,CAA+B;AAAA,aAAKC,EAAEC,IAAP;AAAA,KAA/B,CAAf;AACA,WAAO,iBAAEC,MAAF,CAAS,iBAAEC,OAAF,CAAUL,MAAV,CAAT,EAA4B,iBAAEM,OAA9B,CAAP;AACD;AACD,SAAO,EAAP;AACD;;AAEM,SAASZ,mBAAT,CAA6Ba,MAA7B,EAA2D;AAAA,MAAtBX,eAAsB,uEAAJ,EAAI;;AAChE,MAAGA,gBAAgBY,kBAAnB,EAAuC;AACrC;AACD;AACD,MAAML,OAAOV,kBAAkBG,eAAlB,CAAb;AACAO,OAAKM,OAAL,CAAa,UAACC,CAAD,EAAO;AAClB;AACA,QAAIA,EAAEC,GAAF,KAAU,GAAd,EAAmB;AACjBC,qBAAeL,MAAf,EAAuBG,EAAEG,IAAzB;AACD;AACF,GALD;AAMA,MAAGjB,gBAAgBkB,WAAnB,EAAgC;AAC9B,QAAIjB,MAAMC,OAAN,CAAcF,gBAAgBkB,WAA9B,CAAJ,EAAgD;AAC9C,uBAAEC,IAAF,CAAOnB,gBAAgBkB,WAAvB,EAAoCL,OAApC,CAA4C,UAACI,IAAD,EAAU;AACpDD,uBAAeL,MAAf,EAAuBM,IAAvB;AACD,OAFD;AAGD;AACD,QAAI,OAAOjB,gBAAgBkB,WAAvB,KAAuC,QAA3C,EAAqD;AACnDF,qBAAeL,MAAf,EAAuBX,gBAAgBkB,WAAvC;AACD;AACF;AACF;;AAED,SAASF,cAAT,CAAwBL,MAAxB,EAAgCS,WAAhC,EAA6C;AAC3C,MAAMC,gBAAgB,EAACJ,MAAMG,WAAP,EAAoBL,KAAK,cAAzB,EAAtB;AACAO,UAAQC,GAAR,CAAY,qBAAZ,EAAmCF,aAAnC;AACAV,SAAOa,GAAP,CAAWH,aAAX,EAA0B,UAASI,IAAT,EAAeC,IAAf,EAAqB;AAC7CA,SAAK,IAAL,EAAW,EAACC,IAAI,IAAL,EAAWC,QAAQ,EAACC,WAAW,IAAIC,IAAJ,EAAZ,EAAwBC,SAASX,WAAjC,EAAnB,EAAX;AACD,GAFD;AAGD;;AAGM,SAASrB,WAAT,GAAmC;AAAA,MAAdiC,OAAc,uEAAJ,EAAI;;AACxC,MAAGA,QAAQC,OAAX,EAAoB;AAClBD,YAAQC,OAAR,GAAkBC,SAASF,QAAQC,OAAjB,EAA0B,EAA1B,CAAlB;AACD;AACD,SAAOD,OAAP;AACD","file":"module.js","sourcesContent":["import _ from 'lodash'\n\nexport function extractListenings(transportConfig = {}) {\n\tif (Array.isArray(transportConfig.listenings)) {\n    const pinSet = transportConfig.listenings.map(m => m.pins)\n    return _.reject(_.flatten(pinSet), _.isEmpty)\n  }\n  return []\n}\n\nexport function registerHealthCheck(seneca, transportConfig = {}) {\n  if(transportConfig.disableHealthCheck) {\n    return\n  }\n  const pins = extractListenings(transportConfig)\n  pins.forEach((p) => {\n    // this will add healthCheck on only * pins\n    if (p.cmd === '*') {\n      addHealthCheck(seneca, p.role)\n    }\n  })\n  if(transportConfig.healthCheck) {\n    if (Array.isArray(transportConfig.healthCheck)) {\n      _.uniq(transportConfig.healthCheck).forEach((role) => {\n        addHealthCheck(seneca, role)\n      })\n    }\n    if (typeof transportConfig.healthCheck === 'string') {\n      addHealthCheck(seneca, transportConfig.healthCheck)\n    }\n  }\n}\n\nfunction addHealthCheck(seneca, serviceName) {\n  const serviceObject = {role: serviceName, cmd: '_healthCheck'}\n  console.log('assign health check', serviceObject)\n  seneca.add(serviceObject, function(args, done) {\n    done(null, {ok: true, result: {timestamp: new Date(), service: serviceName}})\n  })\n}\n\n\nexport function parseOption(options = {}) {\n  if(options.timeout) {\n    options.timeout = parseInt(options.timeout, 10)\n  }\n  return options\n}"]}