{"version":3,"sources":["../src/module.js"],"names":["extractListenings","_extractArrayOfPin","registerHealthCheck","parseOption","healthCheckClientService","HEALTH_CHECK_CMD","transportConfig","listenings","arr","Array","isArray","output","map","m","pins","reject","flatten","isEmpty","seneca","console","log","disableHealthCheck","forEach","p","cmd","addHealthCheck","role","healthCheck","uniq","serviceName","serviceObject","si","add","args","done","recursive","ok","result","timestamp","Date","service","then","results","serviceClients","catch","e","options","timeout","parseInt","clients","pin","act"],"mappings":";;;;;QAKgBA,iB,GAAAA,iB;QAIAC,kB,GAAAA,kB;QAQAC,mB,GAAAA,mB;QA6CAC,W,GAAAA,W;QAWAC,wB,GAAAA,wB;;AAzEhB;;;;AACA;;;;;;AAEA,IAAMC,mBAAmB,cAAzB;;AAEO,SAASL,iBAAT,GAAiD;AAAA,MAAtBM,eAAsB,uEAAJ,EAAI;;AACvD,SAAOL,mBAAmBK,gBAAgBC,UAAnC,CAAP;AACA;;AAEM,SAASN,kBAAT,CAA4BO,GAA5B,EAAiC;AACtC,MAAIC,MAAMC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtB,QAAMG,SAASH,IAAII,GAAJ,CAAQ;AAAA,aAAKC,EAAEC,IAAP;AAAA,KAAR,CAAf;AACA,WAAO,iBAAEC,MAAF,CAAS,iBAAEC,OAAF,CAAUL,MAAV,CAAT,EAA4B,iBAAEM,OAA9B,CAAP;AACD;AACD,SAAO,EAAP;AACD;;AAEM,SAASf,mBAAT,CAA6BgB,MAA7B,EAA2D;AAAA,MAAtBZ,eAAsB,uEAAJ,EAAI;;AAChEa,UAAQC,GAAR,CAAY,2CAAZ;AACA,MAAGd,gBAAgBe,kBAAnB,EAAuC;AACrC;AACD;AACD,MAAMP,OAAOd,kBAAkBM,eAAlB,CAAb;AACAQ,OAAKQ,OAAL,CAAa,UAACC,CAAD,EAAO;AAClB;AACA,QAAIA,EAAEC,GAAF,KAAU,GAAd,EAAmB;AACjBC,qBAAeP,MAAf,EAAuBK,EAAEG,IAAzB,EAA+BpB,eAA/B;AACD;AACF,GALD;AAMA,MAAGA,gBAAgBqB,WAAnB,EAAgC;AAC9B,QAAIlB,MAAMC,OAAN,CAAcJ,gBAAgBqB,WAA9B,CAAJ,EAAgD;AAC9C,uBAAEC,IAAF,CAAOtB,gBAAgBqB,WAAvB,EAAoCL,OAApC,CAA4C,UAACI,IAAD,EAAU;AACpDD,uBAAeP,MAAf,EAAuBQ,IAAvB,EAA6BpB,eAA7B;AACD,OAFD;AAGD;AACD,QAAI,OAAOA,gBAAgBqB,WAAvB,KAAuC,QAA3C,EAAqD;AACnDF,qBAAeP,MAAf,EAAuBZ,gBAAgBqB,WAAvC,EAAoDrB,eAApD;AACD;AACF;AACDa,UAAQC,GAAR,CAAY,0CAAZ;AACD;;AAED,SAASK,cAAT,CAAwBP,MAAxB,EAAgCW,WAAhC,EAAmE;AAAA,MAAtBvB,eAAsB,uEAAJ,EAAI;;AACjE,MAAMwB,gBAAgB,EAACJ,MAAMG,WAAP,EAAoBL,KAAKnB,gBAAzB,EAAtB;AACAc,UAAQC,GAAR,CAAY,qBAAZ,EAAmCU,aAAnC;AACAZ,SAAOa,EAAP,CAAUC,GAAV,CAAcF,aAAd,EAA6B,UAASG,IAAT,EAAeC,IAAf,EAAqB;AAChDf,YAAQC,GAAR,+BAAwCS,WAAxC,wBAAsEI,KAAKE,SAA3E;AACA,QAAIF,KAAKE,SAAL,IAAkB,KAAtB,EAA6B;AAC3BD,WAAK,IAAL,EAAW,EAACE,IAAI,IAAL,EAAWC,QAAQ,EAACC,WAAW,IAAIC,IAAJ,EAAZ,EAAwBC,SAASX,WAAjC,EAAnB,EAAX;AACD,KAFD,MAEO;AACLzB,+BAAyBc,MAAzB,EAAiCZ,eAAjC,EACGmC,IADH,CACQ,UAACC,OAAD,EAAW;AACfR,aAAK,IAAL,EAAW,EAACE,IAAI,IAAL,EAAWC,QAAQ,EAACC,WAAW,IAAIC,IAAJ,EAAZ,EAAwBC,SAASX,WAAjC,EAA8Cc,gBAAgBD,OAA9D,EAAnB,EAAX;AACD,OAHH,EAGKE,KAHL,CAGW,UAACC,CAAD,EAAO;AACdX,aAAKW,CAAL;AACH,OALD;AAMD;AAEF,GAbD;AAcD;;AAGM,SAAS1C,WAAT,GAAmC;AAAA,MAAd2C,OAAc,uEAAJ,EAAI;;AACxC,MAAGA,QAAQC,OAAX,EAAoB;AAClBD,YAAQC,OAAR,GAAkBC,SAASF,QAAQC,OAAjB,EAA0B,EAA1B,CAAlB;AACD;AACD,SAAOD,OAAP;AACD;;AAED;;;;AAIO,SAAS1C,wBAAT,CAAkCc,MAAlC,EAAgE;AAAA,MAAtBZ,eAAsB,uEAAJ,EAAI;;AACrE,MAAI2C,UAAUhD,mBAAmBK,gBAAgB2C,OAAnC,CAAd;AACA9B,UAAQC,GAAR,CAAY,gCAAZ,EAA8C6B,OAA9C;AACA,SAAO,mBAAQrC,GAAR,CAAYqC,OAAZ,EAAqB,UAASC,GAAT,EAAc;AACxC,WAAOhC,OAAOiC,GAAP,CAAW,EAACzB,MAAMwB,IAAIxB,IAAX,EAAiBF,KAAKnB,gBAAtB,EAAwC8B,WAAW,KAAnD,EAAX,CAAP;AACD,GAFM,CAAP;AAID","file":"module.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\n\nconst HEALTH_CHECK_CMD = '_healthCheck'\n\nexport function extractListenings(transportConfig = {}) {\n\treturn _extractArrayOfPin(transportConfig.listenings)\n}\n\nexport function _extractArrayOfPin(arr) {\n  if (Array.isArray(arr)) {\n    const output = arr.map(m => m.pins)\n    return _.reject(_.flatten(output), _.isEmpty)\n  }\n  return []\n}\n\nexport function registerHealthCheck(seneca, transportConfig = {}) {\n  console.log('=====##### Register HealthCheck ####=====')\n  if(transportConfig.disableHealthCheck) {\n    return\n  }\n  const pins = extractListenings(transportConfig)\n  pins.forEach((p) => {\n    // this will add healthCheck on only * pins\n    if (p.cmd === '*') {\n      addHealthCheck(seneca, p.role, transportConfig)\n    }\n  })\n  if(transportConfig.healthCheck) {\n    if (Array.isArray(transportConfig.healthCheck)) {\n      _.uniq(transportConfig.healthCheck).forEach((role) => {\n        addHealthCheck(seneca, role, transportConfig)\n      })\n    }\n    if (typeof transportConfig.healthCheck === 'string') {\n      addHealthCheck(seneca, transportConfig.healthCheck, transportConfig)\n    }\n  }\n  console.log('=====##############################=====')\n}\n\nfunction addHealthCheck(seneca, serviceName, transportConfig = {}) {\n  const serviceObject = {role: serviceName, cmd: HEALTH_CHECK_CMD}\n  console.log('assign health check', serviceObject)\n  seneca.si.add(serviceObject, function(args, done) {\n    console.log(`run healthcheck on role: ${serviceName} with recursive ${args.recursive}`)\n    if (args.recursive == false) {\n      done(null, {ok: true, result: {timestamp: new Date(), service: serviceName}})\n    } else {\n      healthCheckClientService(seneca, transportConfig)\n        .then((results)=>{\n          done(null, {ok: true, result: {timestamp: new Date(), service: serviceName, serviceClients: results}})\n        }).catch((e) => {\n          done(e)\n      })\n    }\n\n  })\n}\n\n\nexport function parseOption(options = {}) {\n  if(options.timeout) {\n    options.timeout = parseInt(options.timeout, 10)\n  }\n  return options\n}\n\n/**\n * This method will gather all the client services that this service will consume\n * The method will log out health check output on each role\n */\nexport function healthCheckClientService(seneca, transportConfig = {}) {\n  let clients = _extractArrayOfPin(transportConfig.clients)\n  console.log('run healthcheck resursively to', clients)\n  return Promise.map(clients, function(pin) {\n    return seneca.act({role: pin.role, cmd: HEALTH_CHECK_CMD, recursive: false})\n  })\n  \n}"]}