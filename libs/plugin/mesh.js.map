{"version":3,"sources":["../../src/plugin/mesh.js"],"names":["init","seneca","transportConfig","pins","Array","isArray","listenings","pinSet","map","m","flatten","isEmpty","consul","use","host","console","log","mesh","Error","meshOption","bases","discover","registry","active","multicast","merge","option","ready","id"],"mappings":";;;;;QAGgBA,I,GAAAA,I;;AAHhB;;;;AACA;;;;;;AAEO,SAASA,IAAT,CAAcC,MAAd,EAAqD;AAAA,MAA/BC,eAA+B,uEAAb,EAAa;;AAC3D,MAAIC,aAAJ;AACC,MAAIC,MAAMC,OAAN,CAAcH,gBAAgBI,UAA9B,CAAJ,EAA+C;AAC7C,QAAMC,SAASL,gBAAgBI,UAAhB,CAA2BE,GAA3B,CAA+B;AAAA,aAAKC,EAAEN,IAAP;AAAA,KAA/B,CAAf;AACAA,WAAO,iBAAEO,OAAF,CAAUH,MAAV,CAAP;AACD;AACD,MAAG,CAAC,iBAAEI,OAAF,CAAUT,gBAAgBU,MAA1B,CAAJ,EAAuC;AACtCX,WAAOY,GAAP,CAAW,iBAAX,EAA8B;AAC5BC,YAAMZ,gBAAgBU,MAAhB,CAAuBE;AADD,KAA9B;AAGAC,YAAQC,GAAR,CAAY,yBAAZ,EAAuCd,gBAAgBU,MAAhB,CAAuBE,IAA9D;AACA;AACDC,UAAQC,GAAR,CAAY,2BAAZ,EAAyCd,gBAAgBe,IAAzD;AACA,MAAI,iBAAEN,OAAF,CAAUT,gBAAgBe,IAA1B,CAAJ,EAAqC;AACpC,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACA;AACDH,UAAQC,GAAR,CAAY,YAAZ,EAA0Bb,IAA1B;AACA,MAAIgB,aAAa;AAChBL,UAAMZ,gBAAgBe,IAAhB,CAAqBH,IADX;AAEfX,UAAMA,IAFS;AAGfiB,WAAMlB,gBAAgBe,IAAhB,CAAqBG,KAHZ;AAIfC,cAAS;AACPC,gBAAS;AACPC,gBAAQ;AADD,OADF;AAIPC,iBAAU;AACRD,gBAAQ;AADA;AAJH;AAJM,GAAjB;AAaAJ,eAAa,iBAAEM,KAAF,CAAQvB,gBAAgBe,IAAhB,CAAqBS,MAA7B,EAAqCP,UAArC,CAAb;AACAJ,UAAQC,GAAR,CAAY,qBAAZ,EAAmCG,UAAnC;AACAlB,SAAOY,GAAP,CAAW,MAAX,EAAmBM,UAAnB,EACCQ,KADD,CACO,YAAW;AACjBZ,YAAQC,GAAR,CAAY,yBAAZ,EAAuC,KAAKY,EAA5C;AACA,GAHD;AAIA,SAAO3B,MAAP;AAED","file":"mesh.js","sourcesContent":["import seneca from 'seneca';\nimport _ from 'lodash'\n\nexport function init(seneca, transportConfig = {}, ...args) {\n\tlet pins\n  if (Array.isArray(transportConfig.listenings)) {\n    const pinSet = transportConfig.listenings.map(m => m.pins)\n    pins = _.flatten(pinSet)\n  }\n  if(!_.isEmpty(transportConfig.consul)) {\n  \tseneca.use('consul-registry', {\n    \thost: transportConfig.consul.host\n  \t})\n  \tconsole.log(\"Register consul host at\", transportConfig.consul.host)\n  }\n  console.log(\"Register mesh with config\", transportConfig.mesh)\n  if (_.isEmpty(transportConfig.mesh)) {\n  \tthrow new Error(\"transportConfig.mesh should not be empty\")\n  }\n  console.log(\"on pin ==>\", pins)\n  let meshOption = {\n  \thost: transportConfig.mesh.host,\n    pins: pins,\n    bases:transportConfig.mesh.bases,\n    discover:{\n      registry:{\n        active: true\n      },\n      multicast:{\n        active: false\n      }\n    }\n  }\n  meshOption = _.merge(transportConfig.mesh.option, meshOption)\n  console.log(\"initilize mesh with\", meshOption)\n  seneca.use('mesh', meshOption)\n  .ready(function() {\n  \tconsole.log(\"starting mesh with base\", this.id)\n  })\n  return seneca\n\n}"]}