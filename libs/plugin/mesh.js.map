{"version":3,"sources":["../../src/plugin/mesh.js"],"names":["init","Module","seneca","transportConfig","pins","extractListenings","isEmpty","consul","use","host","console","log","mesh","Error","meshOption","port","listen","bases","discover","registry","active","multicast","merge","option","ready","id"],"mappings":";;;;;QAGgBA,I,GAAAA,I;;AAHhB;;;;AACA;;IAAYC,M;;;;;;;;AAEL,SAASD,IAAT,CAAcE,MAAd,EAAqD;AAAA,MAA/BC,eAA+B,uEAAb,EAAa;;AAC3D,MAAIC,OAAOH,OAAOI,iBAAP,CAAyBF,eAAzB,CAAX;;AAEC,MAAG,CAAC,iBAAEG,OAAF,CAAUH,gBAAgBI,MAA1B,CAAJ,EAAuC;AACtCL,WAAOM,GAAP,CAAW,iBAAX,EAA8B;AAC5BC,YAAMN,gBAAgBI,MAAhB,CAAuBE;AADD,KAA9B;AAGAC,YAAQC,GAAR,CAAY,yBAAZ,EAAuCR,gBAAgBI,MAAhB,CAAuBE,IAA9D;AACA;AACDC,UAAQC,GAAR,CAAY,2BAAZ,EAAyCR,gBAAgBS,IAAzD;AACA,MAAI,iBAAEN,OAAF,CAAUH,gBAAgBS,IAA1B,CAAJ,EAAqC;AACpC,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACA;AACDH,UAAQC,GAAR,CAAY,YAAZ,EAA0BP,IAA1B;AACA,MAAIU,aAAa;AAChBL,UAAMN,gBAAgBS,IAAhB,CAAqBH,IADX;AAEfM,UAAMZ,gBAAgBS,IAAhB,CAAqBG,IAArB,IAA4B,KAFnB;AAGfC,yCAAWZ,IAAX,EAHe;AAIfa,WAAMd,gBAAgBS,IAAhB,CAAqBK,KAJZ;AAKfC,cAAS;AACPC,gBAAS;AACPC,gBAAQ;AADD,OADF;AAIPC,iBAAU;AACRD,gBAAQ;AADA;AAJH;AALM,GAAjB;AAcAN,eAAa,iBAAEQ,KAAF,CAAQnB,gBAAgBS,IAAhB,CAAqBW,MAA7B,EAAqCT,UAArC,CAAb;AACAJ,UAAQC,GAAR,CAAY,qBAAZ,EAAmCG,UAAnC;AACAZ,SAAOM,GAAP,CAAW,MAAX,EAAmBM,UAAnB,EACCU,KADD,CACO,YAAW;AACjBd,YAAQC,GAAR,CAAY,yBAAZ,EAAuC,KAAKc,EAA5C;AACA,GAHD;AAIA,SAAOvB,MAAP;AAED","file":"mesh.js","sourcesContent":["import _ from 'lodash'\nimport * as Module from '../module'\n\nexport function init(seneca, transportConfig = {}, ...args) {\n\tlet pins = Module.extractListenings(transportConfig)\n\n  if(!_.isEmpty(transportConfig.consul)) {\n  \tseneca.use('consul-registry', {\n    \thost: transportConfig.consul.host\n  \t})\n  \tconsole.log(\"Register consul host at\", transportConfig.consul.host)\n  }\n  console.log(\"Register mesh with config\", transportConfig.mesh)\n  if (_.isEmpty(transportConfig.mesh)) {\n  \tthrow new Error(\"transportConfig.mesh should not be empty\")\n  }\n  console.log(\"on pin ==>\", pins)\n  let meshOption = {\n  \thost: transportConfig.mesh.host,\n    port: transportConfig.mesh.port ||39999,\n    listen:[...pins],\n    bases:transportConfig.mesh.bases,\n    discover:{\n      registry:{\n        active: true\n      },\n      multicast:{\n        active: false\n      }\n    }\n  }\n  meshOption = _.merge(transportConfig.mesh.option, meshOption)\n  console.log(\"initilize mesh with\", meshOption)\n  seneca.use('mesh', meshOption)\n  .ready(function() {\n  \tconsole.log(\"starting mesh with base\", this.id)\n  })\n  return seneca\n\n}"]}